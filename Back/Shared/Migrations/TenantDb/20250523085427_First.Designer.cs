// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shared.Context;

#nullable disable

namespace Shared.Migrations.TenantDb
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20250523085427_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("I_ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("I_CREATED_AT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("I_EMAIL");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("I_EXPIRES_AT");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("I_IS_USED");

                    b.Property<string>("Phone_Number")
                        .HasColumnType("text")
                        .HasColumnName("I_PHONE_NUMBER");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("I_TENANT_ID");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("I_TOKEN");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("I_USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Invitation");
                });

            modelBuilder.Entity("Shared.Models.Join.UserTenantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("J_ID");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("J_USER_TENANT_ROLE");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("J_TENANT_ID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("J_USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("JOIN_TENANT_USER");
                });

            modelBuilder.Entity("Shared.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("T_ID");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("T_CODE");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("text")
                        .HasColumnName("T_CONNECTION_STRING");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("T_NAME");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("J_USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("Shared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("A_ID");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("A_ACTIVE");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("A_EMAIL");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("A_PASSWORD_HASH");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("A_PHONE_NUMBER");

                    b.Property<bool>("Registred")
                        .HasColumnType("boolean")
                        .HasColumnName("A_REGISTRED");

                    b.Property<string>("Seed")
                        .HasColumnType("text")
                        .HasColumnName("A_SEED");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("A_USERNAME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("ACCOUNT");
                });

            modelBuilder.Entity("Shared.Models.Invitation", b =>
                {
                    b.HasOne("Shared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Shared.Models.Join.UserTenantRole", b =>
                {
                    b.HasOne("Shared.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Models.Tenant", b =>
                {
                    b.HasOne("Shared.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Shared.Models.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
